<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>another edit</title>
    <url>/2020/11/17/another-edit/</url>
    <content><![CDATA[<h1 id="I-think-it’s-very-useful"><a href="#I-think-it’s-very-useful" class="headerlink" title="I think it’s very useful."></a>I think it’s very useful.</h1><h2 id="what-do-you-think"><a href="#what-do-you-think" class="headerlink" title="what do you think."></a>what do you think.</h2><p>haha what the fuck are you doing.</p>
]]></content>
      <tags>
        <tag>Typora edit</tag>
      </tags>
  </entry>
  <entry>
    <title>c/c++堆栈.md</title>
    <url>/2020/11/19/c-c-dui-zhan-md/</url>
    <content><![CDATA[<h3 id="C-创建对象："><a href="#C-创建对象：" class="headerlink" title="C++创建对象："></a>C++创建对象：</h3><ol>
<li><p><code>Object obj;</code>实例化方法 在栈中分配内存  </p>
</li>
<li><p><code>Object* object =new Object();</code>动态分配内存</p>
</li>
</ol>
<h3 id="new和malloc的区别"><a href="#new和malloc的区别" class="headerlink" title="new和malloc的区别"></a>new和malloc的区别</h3><blockquote>
<p>new必须delete删除 不用new系统会自动回收</p>
</blockquote>
<blockquote>
<p>new 建造一个有对象，并调用对象的构造函数初始化对象：第一步申请内存，第二步调用构造函数初始化对象，第三步返回指针所指向对象的类型和地址</p>
</blockquote>
<blockquote>
<p>delete：首先调用析构函数，然后销毁堆内存</p>
</blockquote>
<blockquote>
<p>对于非内部数据类型的对象而言，仅用malloc/free无法满足动态对象的要求。</p>
</blockquote>
<blockquote>
<p>free对象无法执行析构函数</p>
</blockquote>
<blockquote>
<p>new能够按照变量类型自动地分配所需空间长度，不必使用宏sizeof</p>
</blockquote>
<blockquote>
<p>new 能够返回正确的指针类型</p>
</blockquote>
<blockquote>
<p>new创建对象数组，只能使用对象的无参数构造函数</p>
</blockquote>
<blockquote>
<p>malloc函数本身并不识别要申请的内存是什么类型，只关心内存的总字节数</p>
</blockquote>
<h3 id="堆简介"><a href="#堆简介" class="headerlink" title="堆简介"></a>堆简介</h3><p>堆由开发人员分配和释放，若开发人员不释放，程序结束时由OS回收，堆内存的生长方向是</p>
<p>由低到高。堆 是动态存储区，程序运行时分配 malloc new都是堆上操作</p>
<h3 id="栈简介"><a href="#栈简介" class="headerlink" title="栈简介"></a>栈简介</h3><p>栈：由操作系统自动分配释放，用于存放函数的参数值、局部变量等。</p>
<p>函数中定义的局部变量按照先后定义的顺序一次压入栈中。栈的内存地址生长方向由高到低，</p>
<p>所以 后定义的变量地址低于先定义的变量</p>
<h3 id="堆与栈的区别"><a href="#堆与栈的区别" class="headerlink" title="堆与栈的区别"></a>堆与栈的区别</h3><ul>
<li><p>管理方式不同：栈由操作系统自动分配释放，无需手动控制；堆的申请和释放工作由程序员控制，容易产生内存泄漏。</p>
</li>
<li><p>空间大小不同：每个进程拥有的栈的大小远远小于堆的大小。理论上，程序员可以申请堆的大小为虚拟内存的大小。</p>
</li>
<li><p>生长方向不同：堆的生长方向 由低到高；栈的生长方向由高到低</p>
</li>
</ul>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcxMjIyMjI1OTU0NjA5?x-oss-process=image/format,png" alt="栈图"></p>
<p> （<strong>EBP寄存器是用于访问堆栈中的数据的</strong>，它指向堆栈中间的某个位置（具体位置后文会具体讲解），<em>函数的参数地址比EBP的值高</em>，而<em>函数的局部变量地址比EBP的值低</em>，因此参数或局部变量总是通过EBP加减一定的偏移地址来访问的）</p>
<ul>
<li><p>分配方式不同：<strong>堆都是动态分配的，没有静态分配的堆</strong>。栈由两种分配方式：<strong>静态分配和动态分配。</strong></p>
</li>
<li><p><strong>静态分配</strong>是由操作系统完成，如 局部变量的分配。 <strong>动态分配</strong>是由 alloca函数进行分配，但是栈的动态分配是由操作系统进行释放，<strong>与堆不同</strong>。</p>
</li>
<li><p>存放内容不同：栈存放的内容，<em>函数返回地址、相关参数、局部变量和寄存器内容等</em>；堆中具体存放的内容是由<em>程序员来填充</em>的。</p>
</li>
<li><p>全局区：<strong>全局变量和静态变量的存储是放在一块的</strong>，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后由系统释放</p>
</li>
<li><p>文字常量区：常量字符串放在这里，程序结束后由系统释放</p>
</li>
<li><p>程序代码区：存放函数体的二进制代码</p>
</li>
</ul>
<p><span class="github-emoji"><span>🦅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f985.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  <span class="github-emoji"><span>🦁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> </p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>日常文章</category>
      </categories>
      <tags>
        <tag>初学者</tag>
      </tags>
  </entry>
  <entry>
    <title>newBolg</title>
    <url>/2020/11/15/newbolg/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>日常文章</category>
      </categories>
      <tags>
        <tag>normal</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>测试自动打开markdown</title>
    <url>/2020/11/16/ce-shi-zi-dong-da-kai-markdown/</url>
    <content><![CDATA[<p>哈哈，马勒戈壁的，真的能用</p>
<p>还可以，要不要试试about页面展示呢？</p>
]]></content>
      <tags>
        <tag>爱好</tag>
      </tags>
  </entry>
  <entry>
    <title>终于完成</title>
    <url>/2020/11/15/zhong-yu-wan-cheng/</url>
    <content><![CDATA[<p>卧槽能不能用啊</p>
<h2 id="测试一下，好不好用啊"><a href="#测试一下，好不好用啊" class="headerlink" title="测试一下，好不好用啊"></a>测试一下，好不好用啊</h2><h1 id="真的好用吗"><a href="#真的好用吗" class="headerlink" title="真的好用吗"></a>真的好用吗</h1>]]></content>
  </entry>
</search>
